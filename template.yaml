AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lambda to report Service Catalog costs to the AWS Marketplace

#Parameters:
# TODO: re-enable after completing tests
#  Schedule:
#    Description: Schedule to execute this lambda
#    Type: String
#    Default: rate(1 day)
#    ConstraintDescription: "Use schedule format: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.htm"

Metadata:
  AWS::ServerlessRepo::Application:
    Name: "lambda-sc-cost-meter"
    Description: "Lambda to report Service Catalog costs to the AWS Marketplace"
    Author: "Sage-Bionetworks"
    SpdxLicenseId: "Apache-2.0"
    # paths are relative to .aws-sam/build directory
    LicenseUrl: "LICENSE"
    ReadmeUrl: "README.md"
    Labels: ["serverless", "cost", "marketplace", "billing", "metering", "reporting"]
    HomePageUrl: "https://github.com/Sage-Bionetworks-IT/lambda-sc-cost-meter"
    SemanticVersion: "0.0.1"
    SourceCodeUrl: "https://github.com/Sage-Bionetworks-IT/lambda-sc-cost-meter/tree/0.0.1"

Globals:
  Function:
    Timeout: 180  # max timeout is 15mins

Resources:
  MeterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: sc_cost_meter/app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt FunctionRole.Arn
      Events:
        # TODO: re-enable after completing tests
        # RecurringSchedule:
        #  Type: Schedule
        #  Properties:
        #    Schedule: !Ref Schedule
        MeterApi:
          Type: Api
          Properties:
            Path: /meter
            Method: get
      Environment:
        Variables:
          MARKETPLACE_ID_DYNAMO_TABLE_NAME: !ImportValue
            'Fn::Sub': '${AWS::Region}-marketplace-dynamo-MarketplaceDynamoDBTable'

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref InstanceTagPolicy
        - !Ref BucketTagPolicy
        - !Ref SystemManagerPolicy
        - !Ref MarketplacePolicy
        - !Ref CostExplorerPolicy
        - !Ref DynamoDbManagedPolicy

  InstanceTagPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ReadTags
            Effect: 'Allow'
            Action:
              - 'ec2:DescribeTags'
            Resource: '*'

  BucketTagPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ReadTags
            Effect: 'Allow'
            Action:
              - 's3:GetBucketTagging'
            Resource: '*'

  SystemManagerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ReadTags
            Effect: 'Allow'
            Action:
              - 'ssm:DescribeInstanceInformation'
            Resource: '*'

  MarketplacePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: MarketplaceAccess
            Effect: 'Allow'
            Action:
              - 'aws-marketplace:BatchMeterUsage'
              - 'aws-marketplace:GetEntitlements'
            Resource: '*'

  CostExplorerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CostExploerViewAccess
            Effect: 'Allow'
            Action:
              - 'aws-portal:View*'
              - 'ce:Get*'
              - 'ce:List*'
              - 'ce:Describe*'
            Resource: '*'

  DynamoDbManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DynamoDbAccess
            Action:
              - 'dynamodb:*Get*'
              - 'dynamodb:*List*'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:scan'
              - 'dynamodb:query'
            Effect: Allow
            Resource: !ImportValue
              'Fn::Sub': '${AWS::Region}-marketplace-dynamo-MarketplaceDynamoDBTableArn'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  MeterFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for meter function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/meter/"
  MeterFunctionArn:
    Description: "Meter Lambda Function ARN"
    Value: !GetAtt MeterFunction.Arn
  MeterFunctionRoleArn:
    Description: "Implicit IAM Role created for meter function"
    Value: !GetAtt FunctionRole.Arn
